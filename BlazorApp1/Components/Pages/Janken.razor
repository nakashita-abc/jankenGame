@page "/Janken"

@* 動的な動きを可能にする *@
@rendermode @(new InteractiveServerRenderMode(prerender:false))
@inject Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage.ProtectedSessionStorage storage

<PageTitle>じゃんけんGAME</PageTitle>

@if (!refMode)
{
    <h1>じゃんけんゲーム</h1>
    <p>@DateTime.Now</p>

    @* bootstrap使用 *@
    <p>
        <div class="btn-group" role="group" aria-label="Basic mixed styles example">
            <button type="button" class="btn btn-danger" @onclick="() => jankenStart(1)">グー</button>
            <button type="button" class="btn btn-warning" @onclick="() => jankenStart(2)">チョキ</button>
            <button type="button" class="btn btn-success" @onclick="() => jankenStart(3)">パー</button>
        </div>
    </p>

    <table>
        <tr>
            <td><h3>私の出す手は・・・</h3></td>
            <td>
                @if (message.Equals("グー"))
                {
                    <button type="button" class="btn btn-danger" style="border-radius:10px" disabled>@message</button>
                }
                else if (message.Equals("チョキ"))
                {
                    <button type="button" class="btn btn-warning" style="border-radius:10px" disabled>@message</button>
                }
                else if (message.Equals("パー"))
                {
                    <button type="button" class="btn btn-success" style="border-radius:10px" disabled>@message</button>
                }
            </td>
        </tr>
    </table>
    <br/>
    

    @if (resultMessage.Equals("WIN！！！"))
    {
        <h1 style="color:red">@resultMessage</h1>
    }else if (resultMessage.Equals("LOSE…"))
    {
        <h1 style="color:blue">@resultMessage</h1>
    }
    else
    {
        <h1 style="color:deeppink">@resultMessage</h1>
    }
    <br/><br/>
    <button type="button" class="btn btn-dark" style="border-radius:100%" onclick="@onRefClick">成績参照</button>
    <button type="button" class="btn btn-dark" style="border-radius:100%" onclick="@onResetClick">リセット</button>

}
else if (refMode)
{
    <h3>参照モード！</h3>

    <h3>あなたの成績は・・・</h3>
    <br />
    <h1>@(gameCount)試合中<span style="color:orangered">@(winCount)</span>勝です！！(勝率@(winPercent)％)</h1>
    <button type="button" class="btn btn-warning" onclick="@onBackClick">戻る</button>
}



@code{
    //勝敗結果
    private string resultMessage = "";
    //コンピュータの出す手
    private string message = "";
    //ジャンケンの勝敗(1:クライアントの勝利　2:コンピュータの勝利　3:引き分け)
    int resultFlg = 0;
    //参照画面に遷移するかどうか
    private Boolean refMode = false;
    Random random = new Random();
    //総回数
    private int gameCount = 0;
    //クライアントの勝利回数
    private int winCount = 0;
    //勝率
    int winPercent=0;

    protected override async Task OnInitializedAsync()
    {
        //試合数
        var storageGameCount = await storage.GetAsync<int>("gameCount");
        if (storageGameCount.Success)
        {
            this.gameCount = storageGameCount.Value;
        }

        //勝利数
        var storageWinCount = await storage.GetAsync<int>("winCount");
        if (storageWinCount.Success)
        {
            this.winCount = storageWinCount.Value;
        }
    }

    private async Task onResetClick()
    {
        gameCount = 0;
        winCount = 0;
        winPercent = 0;
        await storage.SetAsync("winCount", winCount);
        await storage.SetAsync("gameCount", gameCount);
    }

    private async Task jankenStart(int jankenNumber)
    {
        //コンピュータの出す手を決める（１：グー、２：チョキ、３：パー）
        int comJankenNumber = random.Next(1, 4);
        this.executeJanken(jankenNumber, comJankenNumber);

        //コンピュータ結果表示
        if (comJankenNumber == 1)
        {
            message = "グー";
        }
        else if (comJankenNumber == 2)
        {
            message = "チョキ";
        }
        else if(comJankenNumber==3)
        {
            message = "パー";
        }

        //結果表示
        if (resultFlg == 1)
        {
            winCount += 1;
            await storage.SetAsync("winCount", winCount);
            resultMessage = "WIN！！！";
        }
        else if(resultFlg == 2){
            resultMessage = "LOSE…";
        }
        else
        {
            resultMessage = "DRAW";
        }

        //試合回数カウント
        gameCount += 1;
        await storage.SetAsync("gameCount", gameCount);
    }

    private void executeJanken(int clientNum,int computerNum)
    {
        if(clientNum==1 & computerNum == 3)
        {
            resultFlg = 2;
        }
        else if (clientNum == 3 & computerNum == 1)
        {
            resultFlg = 1;
        }
        else if (clientNum == computerNum)
        {
            resultFlg = 3;
        }
        else if (clientNum < computerNum)
        {
            resultFlg = 1;
        }
        else
        {
            resultFlg = 2;
        }
    }

    private void onRefClick()
    {
        if (gameCount != 0)
        {
            winPercent = (winCount*100 / gameCount);
        }
        
        this.refMode = true;
    }

    private void onBackClick()
    {
        this.refMode = false;
    }
}